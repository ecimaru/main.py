    - Customer 클래스
        - add_account 함수 수정
            - 파라미터: 계좌번호(계좌번호는 문자열이여도 됩니다)
            - self.accounts 에 a_df 형태에 맞게 새로운 계좌 데이터를 할당
            - self.customer 의 계좌개수를 +1
            //
        - add_amount 함수 수정
            - 파라미터: 계좌번호, 입금금액
            - self.accounts 에서 해당 계좌번호의 계좌금액에서 입금금액 추가
            - self.customer 의 총합금액과 등급 업데이트
        - sub_amount 함수 수정
            - 파라미터: 계좌번호, 출금금액
            - self.accounts 에서 해당 계좌번호의 계좌금액에서 출금금액 차감
            - self.customer 의 총합금액과 등급 업데이트
        - get_total_amount 함수 생성
            - 고객이 가지고 있는 모든 계좌의 총합을 반환
        - update 함수 생성
            - 파라미터: 고객데이터프레임, 계좌데이터프레임
            - 클래스내의 수정된 고객시리즈 데이터를 고객데이터프레임에 업데이트
            - 클래스내의 수정된  데이터를 고객데이터프레임에 업데이트
    - 은행 모듈 프로세스
        - create_customer함수 수정
            - 고객 데이터프레임에 입력받은 고객아이디를 인덱스로 고객데이터 추가
            - 고객데이터는 고객데이터프레임의 컬럼에 맞게 구성(딕셔너리추천)
                - 고객아이디: 입력값
                - 고객이름: 입력값
                - 계좌개수: 0
                - 총합금액: 0
                - 고객등급: ‘normal’
        - show_list 함수 수정
            - 모든 고객의 고객 이름과 고객 아이디를 다음과 같이 출력
            - '고객이름:{} 고객번호:{}' {}안은 실제 데이터가 입력
        - search_customer 함수 수정
            - 파라미터: 고객 아이디
            - 고객이 있다면 고객데이터프레임 에서 해당 고객아이디에 해당하는 시리즈 customer 변수에 할당
            - 고객이 있다면 계좌데이터프레임 에서 해당 고객아이디에 해당하는 데이터프레임 account 변수에 할당
            - 데이터프레임은 기본적으로 본사본을 반환(리턴)
            - 해당 데이터로 고객 인스턴스 생성하여 반환
            - 고객이 없다면 None 반환
        - create_acount 함수 수정
            - search_customer 를 통해 고객을 찾고 새 계좌 생성
            - 계좌, 고객 데이터프레임 업데이트(고객 클래스에 update활용)
            - '{} 고객의 {} 계좌가 등록되었습니다' 출력
        - deposit 함수 생성
            - search_customer 를 통해 고객을 찾음
            - 입력받은 계좌에 입력받은 금액 추가
            - 데이터프레임 업데이트(고객 클래스에 update활용)
        - withdraw 함수 수정
            - search_customer 를 통해 고객을 찾음
            - 입력받은 계좌에 입력받은 금액 차감
            - 데이터프레임 업데이트(고객 클래스에 update활용)
        - ca_merge 함수 생성
            - 고객데이터프레임에 계좌데이터프레임을 결합(merge)하여 ‘ca_merge.csv’ 파일로 저장
            - 결합시 고객아이디(’c_id’) 를 기준으로 결합
            - 결과는 밑에 이미지와 같아야함



        - group_rat_count 함수 생성
            - 고객등급별 고객 명수 출력
            - groupby함수 사용할것
            - 다음과 같은 데이터프레임으로 출력
                - 인덱스: 고객등급
                - 컬럼: 고객명수(’count’)